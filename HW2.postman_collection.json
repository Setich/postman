{
	"info": {
		"_postman_id": "0bb2826b-9fa8-439d-a574-26ba5f8350c0",
		"name": "HW1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "HW1",
			"item": [
				{
					"name": "EP_1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/get_method?name=Aleksey&age=27",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"get_method"
							],
							"query": [
								{
									"key": "name",
									"value": "Aleksey"
								},
								{
									"key": "age",
									"value": "27"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Aleksey",
									"type": "text"
								},
								{
									"key": "age",
									"value": "27",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "500",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_3",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_1?name=Aleksey&age=27&weight=90",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_1"
							],
							"query": [
								{
									"key": "name",
									"value": "Aleksey"
								},
								{
									"key": "age",
									"value": "27"
								},
								{
									"key": "weight",
									"value": "90"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_4",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_2?name=Aleks&age=27&salary=500",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_2"
							],
							"query": [
								{
									"key": "name",
									"value": "Aleks"
								},
								{
									"key": "age",
									"value": "27"
								},
								{
									"key": "salary",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_5",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=Aleks&age=27&salary=500",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Aleks"
								},
								{
									"key": "age",
									"value": "27"
								},
								{
									"key": "salary",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_6",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_4?name=Aleks&age=27&salary=500",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Aleks"
								},
								{
									"key": "age",
									"value": "27"
								},
								{
									"key": "salary",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_7",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Aleks",
									"type": "text"
								},
								{
									"key": "age",
									"value": "27",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "500",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW2",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Приходящий токен необходимо передать во все остальные запросы.\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "login",
									"value": "alekseyy1",
									"type": "text"
								},
								{
									"key": "password",
									"value": "1234566666",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json(); //парсим респонс\r",
									"\r",
									"//2) Проверка структуры json в ответе.\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"  \"required\": [\"person\", \"qa_salary_after_12_months\", \"qa_salary_after_6_months\",\"start_qa_salary\"],\r",
									"  \"properties\": {\r",
									"      \"person\": {\r",
									"          \"type\": \"object\",\r",
									"          \"required\":[\"u_age\", \"u_name\", \"u_salary_1_5_year\"],\r",
									"          \"properties\": { \r",
									"              \"u_age\": {\"type\": \"integer\"},\r",
									"              \"u_name\": {\"type\": \"array\"},\r",
									"              \"u_salary_1_5_year\": {\"type\": \"integer\"}\r",
									"          }\r",
									"      },\r",
									"          \"qa_salary_after_12_months\": {\"type\": \"integer\"},\r",
									"          \"qa_salary_after_6_months\": {\"type\": \"integer\"},\r",
									"          \"start_qa_salary\": {\"type\": \"integer\"}\r",
									" },\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"var req = JSON.parse(request.data); //парсим реквест.\r",
									"var salary = parseInt(req.salary); //req.salary - забираем salary из req, parseInt - преобразование в integer.\r",
									"\r",
									"pm.test(\"test salary all multiply \", function () {\r",
									"  pm.expect(jsonData.person.u_salary_1_5_year).to.eql(salary*4);\r",
									"  pm.expect(jsonData.qa_salary_after_12_months).to.eql(salary * 2.9);\r",
									"  pm.expect(jsonData.qa_salary_after_6_months).to.eql(salary * 2);\r",
									"  pm.expect(jsonData.start_qa_salary).to.eql(salary);\r",
									"});\r",
									"\r",
									"//4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
									"postman.setEnvironmentVariable(\"u_salary_1.5_year\", jsonData.person.u_salary_1_5_year);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"age\" :\"27\",\r\n\"salary\": \"500\",\r\n\"name\" : \"Aleksey\",\r\n\"auth_token\": \"{{token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/user_info",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "new_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const jsonData = pm.response.json(); //парсим респонс\r",
									"\r",
									"//2) Проверка структуры json в ответе.\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"  \"required\": [\"age\", \"name\", \"salary\"],\r",
									"  \"properties\": {\r",
									"      \"age\": {\"type\": \"integer\"},\r",
									"      \"name\": {\"type\": \"string\"},\r",
									"      \"salary\": {\"type\": \"array\"}\r",
									"  }\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"var req = request.data; //парсим реквест из form-data.\r",
									"var salary = parseInt(req.salary); //req.salary - забираем salary из req, parseInt - преобразование в integer.\r",
									"pm.test(\"test salary all multiply \", function () {\r",
									"  pm.expect(jsonData.salary[0]).to.eql(salary);\r",
									"  pm.expect(parseInt(jsonData.salary[1])).to.eql(salary*2);\r",
									"  pm.expect(parseInt(jsonData.salary[2])).to.eql(salary*3);\r",
									"});\r",
									"\r",
									"//4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
									"pm.test(\"test array 2>1, 2>0\", function () {\r",
									"  pm.expect(parseInt(jsonData.salary[2])).to.greaterThan(parseInt(jsonData.salary[1]));\r",
									"  pm.expect(parseInt(jsonData.salary[2])).to.greaterThan(jsonData.salary[0]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "27",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "500",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Aleksey",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/new_data",
							"host": [
								"{{url}}"
							],
							"path": [
								"new_data"
							]
						}
					},
					"response": []
				},
				{
					"name": "test_pet_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1) Статус код 200\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"  \"required\": [\"age\", \"daily_food\", \"daily_sleep\", \"name\"],\r",
									"  \"properties\": {\r",
									"      \"age\": {\"type\": \"integer\"},\r",
									"      \"daily_food\": {\"type\": \"number\"},\r",
									"      \"daily_sleep\": {\"type\": \"number\"},\r",
									"      \"salary\": {\"type\": \"string\"}\r",
									"  }\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"var req = request.data;   \r",
									"var weight = req.weight;\r",
									"\r",
									"pm.test(\"test weight multiply \", function () {\r",
									"  pm.expect(jsonData.daily_food).to.eql(weight*0.012);\r",
									"  pm.expect(jsonData.daily_sleep).to.eql(weight* 2.5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "7",
									"type": "text"
								},
								{
									"key": "weight",
									"value": "9",
									"type": "text"
								},
								{
									"key": "name",
									"value": "django",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/test_pet_info",
							"host": [
								"{{url}}"
							],
							"path": [
								"test_pet_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json(); //парсим респонс\r",
									"\r",
									"//2) Проверка структуры json в ответе.\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"  \"required\": [\"age\", \"family\", \"name\", \"salary\"],\r",
									"  \"properties\": {\r",
									"      \"age\": {\"type\": \"string\"},\r",
									"     \"family\": {\r",
									"         \"type\": \"object\",\r",
									"         \"required\": [\"children\", \"u_salary_1_5_year\"],\r",
									"         \"properties\": {\r",
									"             \"children\": {\"type\": \"array\"},\r",
									"             \"u_salary_1_5_year\": {\"type\": \"integer\"}\r",
									"          }\r",
									"        }\r",
									"      },\r",
									"            \"name\": {\"type\": \"string\"},\r",
									"            \"salary\": {\"type\": \"integer\"}\r",
									"   };\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Проверить что занчение поля name = значению переменной name из окружения\r",
									"var req = request.data;  //парсим реквест из form-data.\r",
									"\r",
									"pm.test(\"name compliance \", function () {\r",
									"  pm.expect(jsonData.name).to.eql(req.name);\r",
									"});\r",
									"\r",
									"\r",
									"//4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
									"\r",
									"pm.test(\"age compliance \", function () {\r",
									"  pm.expect(jsonData.age).to.eql(req.age);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "27",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "500",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Aleksey",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/get_test_user",
							"host": [
								"{{url}}"
							],
							"path": [
								"get_test_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const random = Math.floor(Math.random() * jsonData.length);\r",
									"console.log(random, jsonData[random]);\r",
									"\r",
									"postman.setEnvironmentVariable(\"Cur_ID\", jsonData[random].Cur_ID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/currency",
							"host": [
								"{{url}}"
							],
							"path": [
								"currency"
							]
						}
					},
					"response": []
				},
				{
					"name": "curr_byn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();  //парсим респонс\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"  \"required\": [\"Cur_Abbreviation\", \"Cur_ID\", \"Cur_Name\", \"Cur_OfficialRate\", \"Cur_Scale\", \"Date\"],\r",
									"  \"properties\": {\r",
									"      \"Cur_Abbreviation\": {\"type\": \"string\"},\r",
									"       \"Cur_ID\": {\"type\": \"integer\"} ,\r",
									"       \"Cur_Name\": {\"type\": \"string\"}, \r",
									"       \"Cur_OfficialRate\": {\"type\": \"number\"},\r",
									"       \"Cur_Scale\": {\"type\": \"integer\"},\r",
									"       \"Date\": {\"type\": \"string\"}\r",
									"  }\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								},
								{
									"key": "curr_code",
									"value": "504",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/curr_byn",
							"host": [
								"{{url}}"
							],
							"path": [
								"curr_byn"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}